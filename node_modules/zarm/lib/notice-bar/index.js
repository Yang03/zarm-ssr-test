"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _message = _interopRequireDefault(require("../message"));

var _icon = _interopRequireDefault(require("../icon"));

var _keyframes = require("../utils/keyframes");

var NOTICEBAR_KEYFRAME_NAME = 'za-notice-bar-scrolling';

var NoticeBar =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(NoticeBar, _PureComponent);

  function NoticeBar() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, NoticeBar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(NoticeBar)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.wrapper = null;
    _this.content = null;
    _this.state = {
      animationDuration: 0
    };
    return _this;
  }

  (0, _createClass2.default)(NoticeBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateScrolling();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.updateScrolling();
    }
  }, {
    key: "updateScrolling",
    value: function updateScrolling() {
      var _this$props = this.props,
          speed = _this$props.speed,
          delay = _this$props.delay;
      var wrapWidth = this.wrapper.getBoundingClientRect().width;
      var offsetWidth = this.content.getBoundingClientRect().width;

      if (offsetWidth > wrapWidth) {
        // 完整的执行时间 = 前后停留时间 + 移动时间
        var animationDuration = Math.round(delay * 2 + offsetWidth / speed * 1000); // 计算停留时间占总时间的百分比

        var delayPercent = Math.round(delay * 100 / animationDuration); // 删除之前的 keyframe 定义

        if ((0, _keyframes.existKeyframe)(NOTICEBAR_KEYFRAME_NAME)) {
          (0, _keyframes.removeKeyframe)(NOTICEBAR_KEYFRAME_NAME);
        } // 增加重新计算后的 keyframe


        (0, _keyframes.addKeyframe)(NOTICEBAR_KEYFRAME_NAME, "\n        0%, ".concat(delayPercent, "% {\n          -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n        }\n      \n        ").concat(100 - delayPercent, "%, 100% {\n          -webkit-transform: translate3d(").concat(-(offsetWidth - wrapWidth), "px, 0, 0);\n          transform: translate3d(").concat(-(offsetWidth - wrapWidth), "px, 0, 0);\n        }\n      "));
        this.setState({
          animationDuration: animationDuration
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          children = _this$props2.children,
          others = (0, _objectWithoutProperties2.default)(_this$props2, ["prefixCls", "children"]);
      var animationDuration = this.state.animationDuration;
      return _react.default.createElement(_message.default, (0, _extends2.default)({}, others, {
        size: "lg"
      }), _react.default.createElement("div", {
        className: prefixCls,
        ref: function ref(ele) {
          _this2.wrapper = ele;
        }
      }, _react.default.createElement("div", {
        className: "".concat(prefixCls, "__body"),
        ref: function ref(ele) {
          _this2.content = ele;
        },
        style: animationDuration > 0 ? {
          WebkitAnimation: "".concat(NOTICEBAR_KEYFRAME_NAME, " ").concat(animationDuration, "ms linear infinite"),
          animation: "".concat(NOTICEBAR_KEYFRAME_NAME, " ").concat(animationDuration, "ms linear infinite")
        } : undefined
      }, children)));
    }
  }]);
  return NoticeBar;
}(_react.PureComponent);

exports.default = NoticeBar;
NoticeBar.displayName = 'NoticeBar';
NoticeBar.defaultProps = {
  prefixCls: 'za-notice-bar',
  theme: 'warning',
  icon: _react.default.createElement(_icon.default, {
    type: "broadcast"
  }),
  hasArrow: false,
  closable: false,
  speed: 50,
  delay: 2000
};