import { Component } from 'react';
import BasePickerProps from './PropsType';
export interface PickerProps extends BasePickerProps {
    prefixCls?: string;
    className?: string;
}
export declare type DataSource = Array<{
    [key: string]: any;
    children?: DataSource;
}>;
export interface PickerState {
    value: string[] | number[];
    objValue?: Array<{
        [key: string]: any;
    }>;
    dataSource: DataSource;
    tempObjValue?: Array<{
        [key: string]: any;
    }>;
    tempValue?: string[] | number[];
}
export default class Picker extends Component<PickerProps, PickerState> {
    static defaultProps: {
        dataSource: never[];
        prefixCls: string;
        valueMember: string;
        cols: number;
        maskClosable: boolean;
        itemRender: (data: any) => any;
        destroy: boolean;
    };
    private isScrolling;
    state: PickerState;
    static getDerivedStateFromProps(props: any, state: any): {
        tempValue: any;
        tempObjValue: any;
        value: any;
        objValue: any;
        dataSource: any;
        prevProps: any;
    } | null;
    onChange: (selected: any) => void;
    onCancel: () => void;
    onOk: () => false | undefined;
    onTransition: (isScrolling: any) => void;
    render(): JSX.Element;
}
