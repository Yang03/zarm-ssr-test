import React, { Component } from 'react';
import PropsType, { ImageSrc } from './PropsType';
import { Locale } from '../locale-provider/PropsType';
export interface ImagePreviewProps extends PropsType {
    prefixCls?: string;
    className?: string;
    locale?: Locale['ImagePreview'];
}
declare enum LoadStatus {
    before = "loadBefore",
    start = "loadStart",
    end = "loadEnd",
    after = "loadAfter"
}
declare type Images = Array<Partial<ImageSrc> & {
    loaded?: LoadStatus;
}>;
export interface ImagePreviewState {
    images: Images;
    visible: boolean;
    activeIndex?: number;
    currentIndex?: number;
    prevVisible?: number;
    prevActiveIndex?: number;
}
declare class ImagePreview extends Component<ImagePreviewProps, ImagePreviewState> {
    static defaultProps: {
        prefixCls: string;
        activeIndex: number;
        showPagination: boolean;
    };
    doubleClickTimer: any;
    touchStartTime: number;
    moving: boolean;
    state: ImagePreviewState;
    static getDerivedStateFromProps(nextProps: any, state: any): {
        visible: any;
        activeIndex: any;
        currentIndex: any;
        images: Images;
        prevVisible: any;
        prevActiveIndex: any;
    } | null;
    onChange: (index: any) => void;
    close: () => false | undefined;
    loadOrigin: () => void;
    showOriginButton: (images: Images, activeIndex: any) => boolean;
    onWrapperTouchStart: () => void;
    onWrapperTouchEnd: () => void;
    onWrapperTouchMove: () => void;
    onWrapperMouseDown: () => void;
    onWrapperMouseUp: () => void;
    renderImages: () => JSX.Element[];
    render(): JSX.Element;
}
declare const _default: typeof ImagePreview & React.ForwardRefExoticComponent<Readonly<ImagePreviewProps> & Readonly<{
    children?: React.ReactNode;
}> & React.RefAttributes<ImagePreview>>;
export default _default;
