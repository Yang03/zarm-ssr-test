"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _classnames2 = _interopRequireDefault(require("classnames"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Progress =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(Progress, _PureComponent);

  // 线条粗细表
  function Progress(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Progress);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Progress).call(this, props));
    _this.progressElement = void 0;
    _this.state = {
      svgStrokeWidth: _this.strokeWidth
    };
    return _this;
  }

  (0, _createClass2.default)(Progress, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.useSVG) {
        this.resetSVGStrokeWidth();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var props = this.props;

      if (prevProps.strokeWidth !== props.strokeWidth) {
        this.resetSVGStrokeWidth();
      }
    }
  }, {
    key: "resetSVGStrokeWidth",
    value: function resetSVGStrokeWidth() {
      var baseWidth = 32;
      var clientWidth = this.progressElement.clientWidth;
      this.setState({
        svgStrokeWidth: baseWidth / clientWidth * this.strokeWidth
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames,
          _this2 = this;

      var _this$props = this.props,
          theme = _this$props.theme,
          percent = _this$props.percent,
          strokeShape = _this$props.strokeShape,
          shape = _this$props.shape,
          size = _this$props.size,
          style = _this$props.style,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          children = _this$props.children,
          format = _this$props.text;
      var state = this.state;
      var strokeWidth = this.useSVG ? state.svgStrokeWidth : this.strokeWidth;
      var hasKnownSize = size && size in Progress.strokeWeights;
      var cls = (0, _classnames2.default)(prefixCls, className, (_classnames = {}, (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--").concat(size), hasKnownSize), _classnames));
      var sizeStyle = {};

      if (!hasKnownSize) {
        sizeStyle.width = size;

        if (shape === 'circle') {
          sizeStyle.height = size;
        }

        if (shape === 'semi-circle') {
          if (typeof size === 'number') {
            sizeStyle.height = "".concat(size / 2, "px");
          } else if (typeof size === 'string') {
            sizeStyle.height = size.replace(/^(\d+)(.+)$/, function () {
              return parseFloat(arguments.length <= 1 ? undefined : arguments[1]) / 2 + (arguments.length <= 2 ? undefined : arguments[2]);
            });
          }
        }
      }

      var diameter = 32;
      var radius = diameter / 2;
      var extendRadius = radius + strokeWidth / 2;
      var strokeLinecap = strokeShape === 'round' ? 'round' : 'butt';
      var viewBox = shape === 'circle' ? "0 0 ".concat(diameter + strokeWidth, " ").concat(diameter + strokeWidth) : "0 0 ".concat(diameter + strokeWidth, " ").concat((diameter + strokeWidth) / 2);
      var path = shape === 'circle' ? "\n        M".concat(extendRadius, ", ").concat(extendRadius, "\n        m0 ").concat(-radius, "\n        a").concat(radius, " ").concat(radius, " 0 1 1 0 ").concat(diameter, "\n        a").concat(radius, " ").concat(radius, " 0 1 1 0 ").concat(-diameter) : "\n        M".concat(extendRadius, ", ").concat(extendRadius, "\n        m").concat(-radius, " 0\n        a").concat(radius, " ").concat(radius, " 0 0 1 ").concat(diameter, " 0");
      var dasharray = shape === 'circle' ? Math.PI * diameter : Math.PI * diameter / 2;
      var borderRadius = strokeShape === 'round' ? "".concat(this.strokeWidth, "px") : '0';
      var lineTrackStyle = {
        height: "".concat(strokeWidth),
        borderRadius: borderRadius
      };
      var lineThumbStyle = {
        width: "".concat(percent, "%"),
        height: "".concat(strokeWidth, "px"),
        borderRadius: borderRadius
      };
      var formattedPercent = format ? format(percent || 0) : null;
      var hasIndicator = children || formattedPercent;

      var roundInner = (shape === 'circle' || shape === 'semi-circle') && _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("svg", {
        viewBox: viewBox
      }, _react.default.createElement("path", {
        className: "".concat(prefixCls, "__track"),
        d: path,
        strokeWidth: strokeWidth,
        strokeLinecap: strokeLinecap
      }), _react.default.createElement("path", {
        className: "".concat(prefixCls, "__thumb"),
        d: path,
        strokeWidth: strokeWidth,
        strokeLinecap: strokeLinecap,
        strokeDasharray: dasharray,
        strokeDashoffset: dasharray * (100 - percent) / 100
      })), hasIndicator && _react.default.createElement("div", {
        className: "".concat(prefixCls, "__text")
      }, children || formattedPercent));

      var rectInner = shape === 'line' && _react.default.createElement("div", {
        className: "".concat(prefixCls, "__outer")
      }, _react.default.createElement("div", {
        className: "".concat(prefixCls, "__track"),
        style: lineTrackStyle
      }, _react.default.createElement("div", {
        className: "".concat(prefixCls, "__thumb"),
        style: lineThumbStyle
      })), hasIndicator && _react.default.createElement("div", {
        className: "".concat(prefixCls, "__text")
      }, children || formattedPercent));

      return _react.default.createElement("div", {
        className: cls,
        style: _objectSpread({}, sizeStyle, {}, style),
        ref: function ref(ele) {
          _this2.progressElement = ele;
        }
      }, shape === 'line' ? rectInner : roundInner);
    }
  }, {
    key: "useSVG",
    get: function get() {
      var props = this.props;
      return props.shape === 'semi-circle' || props.shape === 'circle';
    }
  }, {
    key: "strokeWidth",
    get: function get() {
      var _this$props2 = this.props,
          strokeWidth = _this$props2.strokeWidth,
          size = _this$props2.size;
      var strokeWeights = Progress.strokeWeights;
      var backup = strokeWeights[size && size in strokeWeights ? size : 'md'];
      return Math.max(1, strokeWidth || backup);
    }
  }]);
  return Progress;
}(_react.PureComponent);

exports.default = Progress;
Progress.defaultProps = {
  prefixCls: 'za-progress',
  theme: 'primary',
  shape: 'line',
  size: 'md',
  percent: 0,
  strokeShape: 'round',
  text: function text(percent) {
    return "".concat(percent, "%");
  }
};
Progress.strokeWeights = {
  lg: 10,
  md: 8,
  sm: 4
};