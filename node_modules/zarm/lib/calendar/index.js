"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Month = _interopRequireDefault(require("./Month"));

var _date = _interopRequireDefault(require("../utils/date"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var CN_DAY_NAME = ['日', '一', '二', '三', '四', '五', '六'];

var parseState = function parseState(props) {
  var defaultValue = props.defaultValue,
      multiple = props.multiple;
  var value = props.value;
  var tmpValue;
  value = value || defaultValue;
  value = Object.prototype.toString.call(value) === '[object Array]' ? value : value && [value] || []; // 注掉该逻辑，强制根据 multiple 控制节点个数，后面改进
  // tmpValue = value.map(item => DateTool.parseDay(item));

  tmpValue = value.slice(0, multiple ? 2 : 1).map(function (item) {
    return _date.default.parseDay(item);
  }); // 排序过滤

  tmpValue = tmpValue.sort(function (item1, item2) {
    return +item1 - +item2;
  });
  var min = props.min ? _date.default.parseDay(props.min) : new Date();

  var startMonth = _date.default.cloneDate(min, 'dd', 1);

  var max = props.max ? _date.default.parseDay(props.max) : _date.default.cloneDate(min, 'y', 1);

  var endMonth = _date.default.cloneDate(max, 'dd', _date.default.getDaysByDate(max)); // min、max 排序


  var duration = [min, max].sort(function (item1, item2) {
    return +item1 - +item2;
  });
  var tmp = {
    value: tmpValue,
    min: duration[0],
    max: duration[1],
    startMonth: startMonth,
    endMonth: endMonth,
    // 是否是入参更新(主要是月份跨度更新，需要重新定位)
    refresh: false,
    // 注掉该逻辑，强制根据 multiple 控制节点个数，后面改进
    // steps:Math.max(tmp.value.length, tmp.defaultValue.length);
    steps: multiple ? 2 : 1,
    // 初始化点击步数
    multiple: multiple
  };
  return tmp;
};

var CalendarView =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(CalendarView, _PureComponent);

  // 月份缓存数据
  // 当前月份dom数据缓存
  function CalendarView(props) {
    var _this;

    (0, _classCallCheck2.default)(this, CalendarView);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CalendarView).call(this, props));
    _this.nodes = void 0;
    _this.state = _objectSpread({}, parseState(_this.props), {
      step: 1
    });

    _this.handleDateClick = function (date) {
      var _this$state = _this.state,
          step = _this$state.step,
          steps = _this$state.steps,
          value = _this$state.value;
      var onChange = _this.props.onChange;

      if (step === 1) {
        value.splice(0, value.length);
      }

      value[step - 1] = date;
      value.sort(function (item1, item2) {
        return +item1 - +item2;
      });

      _this.setState({
        value: value,
        step: step >= steps ? 1 : step + 1
      }, function () {
        step >= steps && typeof onChange === 'function' && onChange(value);
      });
    };

    _this.anchor = function () {
      var value = _this.state.value;
      var target = value[0] || CalendarView.now;
      var key = "".concat(target.getFullYear(), "-").concat(target.getMonth());
      var node = _this.nodes[key];

      if (node && Object.prototype.toString.call(node.anchor) === '[object Function]') {
        node.anchor();
      }
    };

    _this.renderWeekBar = function () {
      var prefixCls = _this.props.prefixCls;
      var content = CN_DAY_NAME.map(function (week) {
        return _react.default.createElement("li", {
          key: week,
          className: "".concat(prefixCls, "__bar__item")
        }, week);
      });
      return _react.default.createElement("ul", {
        className: "".concat(prefixCls, "__bar")
      }, content);
    };

    _this.renderMonth = function (dateMonth) {
      var _this$state2 = _this.state,
          value = _this$state2.value,
          min = _this$state2.min,
          max = _this$state2.max;
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          dateRender = _this$props.dateRender,
          disabledDate = _this$props.disabledDate;
      var key = "".concat(dateMonth.getFullYear(), "-").concat(dateMonth.getMonth());
      return _react.default.createElement(_Month.default, {
        prefixCls: prefixCls,
        key: key,
        min: min,
        max: max,
        value: value,
        dateMonth: dateMonth,
        dateRender: dateRender,
        disabledDate: disabledDate,
        onDateClick: _this.handleDateClick,
        ref: function ref(n) {
          _this.nodes[key] = n;
        }
      });
    };

    _this.nodes = {};
    return _this;
  }

  (0, _createClass2.default)(CalendarView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.anchor();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_prevProps, prevState) {
      var refresh = this.state.refresh;

      if (refresh !== prevState.refresh) {
        this.anchor();
      }
    } // 日期点击事件，注意排序

  }, {
    key: "renderMonths",
    // 生成日历内容
    value: function renderMonths() {
      var _this2 = this;

      var prefixCls = this.props.prefixCls;
      var _this$state3 = this.state,
          startMonth = _this$state3.startMonth,
          max = _this$state3.max;
      var arr = Array.from({
        length: _date.default.getMonthCount(startMonth, max)
      });
      var content = arr.map(function (_item, i) {
        return _this2.renderMonth(_date.default.cloneDate(startMonth, 'm', i));
      });
      return _react.default.createElement("section", {
        className: "".concat(prefixCls, "__body")
      }, content);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          className = _this$props2.className;
      return _react.default.createElement("div", {
        className: (0, _classnames.default)(prefixCls, className)
      }, this.renderWeekBar(), this.renderMonths());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if ('value' in nextProps && nextProps.value !== prevState.prevValue || 'multiple' in nextProps && nextProps.multiple !== prevState.prevMultiple || 'min' in nextProps && nextProps.min !== prevState.prevMin || 'max' in nextProps && nextProps.max !== prevState.prevMax) {
        return _objectSpread({}, parseState(nextProps), {
          step: prevState.step ? 1 : prevState.step,
          refresh: !prevState.refresh,
          prevValue: nextProps.value,
          prevMax: nextProps.max,
          prevMin: nextProps.min,
          prevMultiple: nextProps.multiple
        });
      }

      return null;
    }
  }]);
  return CalendarView;
}(_react.PureComponent);

exports.default = CalendarView;
CalendarView.displayName = 'CalendarView';
CalendarView.defaultProps = {
  prefixCls: 'za-calendar',
  multiple: false,
  min: new Date(),
  dateRender: function dateRender(date) {
    return date.getDate();
  },
  disabledDate: function disabledDate() {
    return false;
  }
};
CalendarView.now = new Date();
CalendarView.cache = {
  now: "".concat(CalendarView.now.getFullYear(), "-").concat(CalendarView.now.getMonth(), "-").concat(CalendarView.now.getDate())
};