"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _index = _interopRequireDefault(require("./style/index.native"));

/**
 * 目前用于 modal 的导航，提供简单的返回、确定
 * 一般页面跳转使用 react-navigation
 *
 * showRight: 是否展示右边按钮，默认展示
 * leftText：左边按钮文案
 * rightText： 右边按钮文案
 * onClickLeft： 左边按钮点击事件
 * onClickRight： 右边按钮点击事件
 */
var navBarStyles = _reactNative.StyleSheet.create(_index.default);

var PADDING_TOP = _reactNative.Platform.OS === 'ios' ? 20 : 0;

var NavBar =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(NavBar, _PureComponent);

  function NavBar() {
    (0, _classCallCheck2.default)(this, NavBar);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NavBar).apply(this, arguments));
  }

  (0, _createClass2.default)(NavBar, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          styles = _this$props.styles,
          style = _this$props.style,
          left = _this$props.left,
          right = _this$props.right;
      var navBarWrapperStyle = [styles.navBarWrapper, style, {
        paddingTop: PADDING_TOP
      }];

      var leftBtn = _react.default.createElement(_reactNative.TouchableOpacity, null, _react.default.createElement(_reactNative.Text, {
        style: [styles.btn]
      }, left));

      var rightBtn = right ? _react.default.createElement(_reactNative.TouchableOpacity, null, _react.default.createElement(_reactNative.Text, {
        style: [styles.btn, styles.rightBtn]
      }, right)) : _react.default.createElement(_reactNative.Text, {
        style: styles.btn
      });
      return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.StatusBar, {
        barStyle: "default"
      }), _react.default.createElement(_reactNative.View, {
        style: navBarWrapperStyle
      }, _react.default.createElement(_reactNative.View, {
        style: styles.navBarBox
      }, leftBtn, _react.default.createElement(_reactNative.View, {
        style: styles.titleWrapper
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.titleText
      }, "Photos")), rightBtn)));
    }
  }]);
  return NavBar;
}(_react.PureComponent);

exports.default = NavBar;
NavBar.defaultProps = {
  styles: navBarStyles
  /* leftText: '返回',
  rightText: '确定',
  showRight: true, */

};