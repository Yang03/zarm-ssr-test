import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { PureComponent } from 'react';
import classnames from 'classnames';
import Badge from '../badge';

var TabBarItem =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(TabBarItem, _PureComponent);

  function TabBarItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TabBarItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabBarItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.change = function (value) {
      var onChange = _this.props.onChange;

      if (typeof onChange === 'function') {
        onChange(value);
      }
    };

    return _this;
  }

  _createClass(TabBarItem, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          title = _this$props.title,
          icon = _this$props.icon,
          badge = _this$props.badge,
          style = _this$props.style,
          itemKey = _this$props.itemKey,
          selected = _this$props.selected,
          _this$props$activeIco = _this$props.activeIcon,
          activeIcon = _this$props$activeIco === void 0 ? icon : _this$props$activeIco;
      var cls = classnames("".concat(prefixCls, "__item"), _defineProperty({}, "".concat(prefixCls, "--active"), selected));
      var contentRender = React.createElement(React.Fragment, null, React.createElement("div", {
        className: "".concat(prefixCls, "__icon")
      }, selected ? activeIcon : icon), React.createElement("div", {
        className: "".concat(prefixCls, "__title")
      }, title));
      return React.createElement("div", {
        className: cls,
        style: style,
        onClick: function onClick() {
          _this2.change(itemKey);
        }
      }, badge ? React.createElement(Badge, badge, contentRender) : contentRender);
    }
  }]);

  return TabBarItem;
}(PureComponent);

TabBarItem.defaultProps = {
  prefixCls: 'za-tab-bar'
};
export default TabBarItem;