import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";

var _dec, _class, _class2, _temp;

import React, { PureComponent } from 'react';
import Portal from './Portal';
import warnIfDeprecated from '../utils/warnIfDeprecated';
var Popup = (_dec = warnIfDeprecated([{
  oldProp: 'getContainer',
  newProp: 'mountContainer'
}]), _dec(_class = (_temp = _class2 =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Popup, _PureComponent);

  _createClass(Popup, null, [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.visible !== state.portalVisible) {
        if (props.visible) {
          return {
            renderPortal: true,
            portalVisible: true
          };
        }

        return {
          portalVisible: false
        };
      }

      return null;
    }
  }]);

  function Popup(props) {
    var _this;

    _classCallCheck(this, Popup);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popup).call(this, props));
    _this.portalRef = void 0;
    _this.state = {
      renderPortal: false,
      portalVisible: false
    };
    _this.handlePortalUnmount = _this.handlePortalUnmount.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Popup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var visible = this.props.visible;

      if (visible) {
        this.setState({
          renderPortal: true,
          portalVisible: true
        });
      }
    }
  }, {
    key: "handlePortalUnmount",
    value: function handlePortalUnmount() {
      var destroy = this.props.destroy;

      if (destroy) {
        this.setState({
          renderPortal: false
        });
      } else {
        this.setState({
          renderPortal: true,
          portalVisible: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          renderPortal = _this$state.renderPortal,
          portalVisible = _this$state.portalVisible;
      return renderPortal && React.createElement(Portal, _extends({
        ref: function ref(_ref) {
          _this2.portalRef = _ref;
        }
      }, this.props, {
        visible: portalVisible,
        handlePortalUnmount: this.handlePortalUnmount
      }));
    }
  }]);

  return Popup;
}(PureComponent), _class2.defaultProps = {
  prefixCls: 'za-popup',
  destroy: true
}, _temp)) || _class);
export { Popup as default };