import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { PureComponent } from 'react';
import Keyboard from '../keyboard';
import Popup from '../popup';

var KeyboardPicker =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(KeyboardPicker, _PureComponent);

  _createClass(KeyboardPicker, null, [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('visible' in nextProps) {
        return {
          visible: nextProps.visible
        };
      }

      return null;
    } // static show = (props) => {
    //   ReactDOM.render(<KeyboardPicker {...props} visible />, window.zarmKeyboardPicker);
    // }
    // static hide = () => {
    //   ReactDOM.render(<KeyboardPicker visible={false} />, window.zarmKeyboardPicker);
    // }

  }]);

  function KeyboardPicker(props) {
    var _this;

    _classCallCheck(this, KeyboardPicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(KeyboardPicker).call(this, props));

    _this.onKeyClick = function (key) {
      if (['ok', 'close'].indexOf(key) > -1) {
        _this.setState({
          visible: false
        });
      }

      var onKeyClick = _this.props.onKeyClick;

      if (typeof onKeyClick === 'function') {
        onKeyClick(key);
      }
    };

    _this.state = {
      visible: props.visible
    };
    return _this;
  }

  _createClass(KeyboardPicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          destroy = _this$props.destroy,
          others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "destroy"]);

      var visible = this.state.visible;
      return React.createElement(Popup, {
        className: className,
        visible: visible,
        mask: false,
        destroy: destroy
      }, React.createElement("div", {
        className: prefixCls
      }, React.createElement(Keyboard, _extends({}, others, {
        onKeyClick: this.onKeyClick
      }))));
    }
  }]);

  return KeyboardPicker;
}(PureComponent); // if (typeof window !== 'undefined') {
//   if (!window.zarmKeyboardPicker) {
//     window.zarmKeyboardPicker = document.createElement('div');
//     document.body.appendChild(window.zarmKeyboardPicker);
//   }
//   ReactDOM.render(<KeyboardPicker visible={false} />, window.zarmKeyboardPicker);
// }


KeyboardPicker.defaultProps = {
  prefixCls: 'za-keyboard-picker',
  visible: false,
  type: 'number',
  destroy: true
};
export { KeyboardPicker as default };