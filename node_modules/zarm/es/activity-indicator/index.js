import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { PureComponent } from 'react';
import classnames from 'classnames';
var DIAMETER = 62;

var Circular = function Circular(props) {
  var _classnames;

  var prefixCls = props.prefixCls,
      className = props.className,
      size = props.size,
      percent = props.percent,
      strokeWidth = props.strokeWidth,
      loading = props.loading,
      style = props.style;
  var cls = classnames(className, prefixCls, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _defineProperty(_classnames, "".concat(prefixCls, "--circular"), loading), _classnames));
  var half = DIAMETER / 2;
  var r = half - strokeWidth / 2;
  var round = 2 * Math.PI * r;
  var lineStyle = {
    strokeDasharray: "".concat(round * percent / 100, " ").concat(round),
    strokeWidth: strokeWidth
  };

  if (loading) {
    return React.createElement("span", {
      className: cls,
      style: style
    }, React.createElement("svg", {
      viewBox: "".concat(DIAMETER / 2, " ").concat(DIAMETER / 2, " ").concat(DIAMETER, " ").concat(DIAMETER)
    }, React.createElement("circle", {
      cx: DIAMETER,
      cy: DIAMETER,
      r: r,
      fill: "none",
      style: {
        strokeWidth: strokeWidth
      }
    })));
  }

  return React.createElement("span", {
    className: cls,
    style: style
  }, React.createElement("svg", {
    viewBox: "0 0 ".concat(DIAMETER, " ").concat(DIAMETER)
  }, React.createElement("circle", {
    className: "".concat(prefixCls, "__path"),
    cx: half,
    cy: half,
    r: r,
    fill: "none",
    style: {
      strokeWidth: strokeWidth
    }
  }), React.createElement("circle", {
    className: "".concat(prefixCls, "__line"),
    cx: half,
    cy: half,
    r: r,
    fill: "none",
    style: lineStyle
  })));
};

var Spinner = function Spinner(props) {
  var prefixCls = props.prefixCls,
      className = props.className,
      size = props.size,
      style = props.style;
  var cls = classnames(prefixCls, "".concat(prefixCls, "--spinner"), className, _defineProperty({}, "".concat(prefixCls, "--").concat(size), !!size));
  var spinner = [];

  for (var i = 0; i < 12; i++) {
    spinner.push(React.createElement("div", {
      key: i
    }));
  }

  return React.createElement("div", {
    className: cls,
    style: style
  }, spinner);
};

var ActivityIndicator =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(ActivityIndicator, _PureComponent);

  function ActivityIndicator() {
    _classCallCheck(this, ActivityIndicator);

    return _possibleConstructorReturn(this, _getPrototypeOf(ActivityIndicator).apply(this, arguments));
  }

  _createClass(ActivityIndicator, [{
    key: "render",
    value: function render() {
      var type = this.props.type;
      return type !== 'spinner' ? React.createElement(Circular, this.props) : React.createElement(Spinner, this.props);
    }
  }]);

  return ActivityIndicator;
}(PureComponent);

ActivityIndicator.defaultProps = {
  prefixCls: 'za-activity-indicator',
  strokeWidth: 5,
  percent: 20,
  type: 'circular',
  loading: true
};
export { ActivityIndicator as default };