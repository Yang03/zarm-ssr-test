import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { PureComponent } from 'react';
import classnames from 'classnames';

var Cell =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Cell, _PureComponent);

  function Cell() {
    _classCallCheck(this, Cell);

    return _possibleConstructorReturn(this, _getPrototypeOf(Cell).apply(this, arguments));
  }

  _createClass(Cell, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          hasArrow = _this$props.hasArrow,
          icon = _this$props.icon,
          title = _this$props.title,
          description = _this$props.description,
          help = _this$props.help,
          disabled = _this$props.disabled,
          onClick = _this$props.onClick,
          children = _this$props.children,
          others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "hasArrow", "icon", "title", "description", "help", "disabled", "onClick", "children"]);

      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--link"), !disabled && !!onClick), _defineProperty(_classnames, "".concat(prefixCls, "--arrow"), hasArrow), _classnames));
      var titleCls = classnames("".concat(prefixCls, "__title"), _defineProperty({}, "".concat(prefixCls, "__title--label"), !!children));
      var iconRender = icon && React.createElement("div", {
        className: "".concat(prefixCls, "__icon")
      }, icon);
      var titleRender = title && React.createElement("div", {
        className: titleCls
      }, title);
      var contentRender = children && React.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, children);
      var arrowRender = hasArrow && React.createElement("div", {
        className: "".concat(prefixCls, "__arrow")
      });
      var helpRender = help && React.createElement("div", {
        className: "".concat(prefixCls, "__help")
      }, help);
      return React.createElement("div", _extends({
        className: cls,
        onClick: onClick,
        onTouchStart: function onTouchStart() {}
      }, others), React.createElement("div", {
        className: "".concat(prefixCls, "__inner")
      }, React.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, iconRender), React.createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, titleRender, contentRender), React.createElement("div", {
        className: "".concat(prefixCls, "__footer")
      }, description), arrowRender), helpRender);
    }
  }]);

  return Cell;
}(PureComponent);

Cell.defaultProps = {
  prefixCls: 'za-cell',
  hasArrow: false,
  disabled: false
};
export { Cell as default };