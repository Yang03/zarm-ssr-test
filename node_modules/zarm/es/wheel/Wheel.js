import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { Component } from 'react';
import classnames from 'classnames';
import BScroll from 'better-scroll';
import { isArray } from '../utils/validate';

var getValue = function getValue(props, defaultValue) {
  if ('value' in props) {
    return props.value;
  }

  if ('defaultValue' in props) {
    return props.defaultValue;
  }

  if (isArray(props.dataSource) && props.dataSource[0]) {
    return props.dataSource[0][props.valueMember];
  }

  return defaultValue;
};

var Wheel =
/*#__PURE__*/
function (_Component) {
  _inherits(Wheel, _Component);

  function Wheel() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Wheel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Wheel)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.BScroll = void 0;
    _this.wrapper = void 0;
    _this.isChangedByProps = void 0;

    _this.getSelectedIndex = function (value, dataSource) {
      var valueMember = _this.props.valueMember;
      var index;
      dataSource.some(function (item, i) {
        if (item[valueMember] === value) {
          index = i;
          return true;
        }

        return false;
      });
      return index;
    };

    _this.fireValueChange = function (value) {
      var currentValue = getValue(_this.props);

      if (value === currentValue) {
        return;
      }

      var onChange = _this.props.onChange;

      if (typeof onChange === 'function') {
        onChange(value);
      }
    };

    return _this;
  }

  _createClass(Wheel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          dataSource = _this$props.dataSource,
          disabled = _this$props.disabled,
          onTransition = _this$props.onTransition,
          valueMember = _this$props.valueMember;
      var value = getValue(this.props);
      var initIndex = this.getSelectedIndex(value, dataSource);
      this.BScroll = new BScroll(this.wrapper, {
        wheel: {
          selectedIndex: initIndex,
          wheelWrapperClass: "".concat(prefixCls, "-content"),
          wheelItemClass: "".concat(prefixCls, "-item")
        },
        probeType: 3
      });
      disabled && this.BScroll.disable();
      this.BScroll.on('scroll', function () {
        if (typeof onTransition === 'function') {
          onTransition(_this2.BScroll.isInTransition);
        }
      });
      this.BScroll.on('scrollEnd', function () {
        var curDataSource = _this2.props.dataSource;

        if (_this2.isChangedByProps) {
          _this2.isChangedByProps = false;
          return;
        }

        var index = _this2.BScroll.getSelectedIndex();

        var child = curDataSource[index];
        onTransition(_this2.BScroll.isInTransition);

        if (child) {
          _this2.fireValueChange(child[valueMember]);
        } // else if (console.warn) {
        //   console.warn('child not found', dataSource, index);
        // }

      });
    } // componentWillReceiveProps(nextProps) {
    //   if (nextProps.disabled) {
    //     this.BScroll.disable();
    //   }
    // }

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props2 = this.props,
          value = _this$props2.value,
          dataSource = _this$props2.dataSource,
          disabled = _this$props2.disabled;
      disabled && this.BScroll.disable();
      this.BScroll.refresh();
      var oldIndex = this.getSelectedIndex(prevProps.value, prevProps.dataSource);
      var newIndex = this.getSelectedIndex(value, dataSource);

      if (newIndex !== oldIndex) {
        this.isChangedByProps = true;
        this.BScroll.wheelTo(newIndex);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.BScroll.destroy();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className,
          valueMember = _this$props3.valueMember,
          dataSource = _this$props3.dataSource,
          itemRender = _this$props3.itemRender,
          disabled = _this$props3.disabled;
      var value = getValue(this.props);
      var items = dataSource.map(function (item, index) {
        var _classnames;

        var itemCls = classnames("".concat(prefixCls, "__item"), (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "__item--selected"), value === item[valueMember]), _defineProperty(_classnames, "".concat(prefixCls, "__item--disabled"), disabled), _classnames));
        return React.createElement("div", {
          key: +index,
          className: itemCls
        }, itemRender(item));
      });
      var rollerCls = classnames(prefixCls, className);
      return React.createElement("div", {
        className: rollerCls,
        ref: function ref(wrapper) {
          _this3.wrapper = wrapper;
        }
      }, React.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, items));
    }
  }]);

  return Wheel;
}(Component);

Wheel.defaultProps = {
  prefixCls: 'za-wheel',
  dataSource: [],
  valueMember: 'value',
  itemRender: function itemRender(item) {
    return item.label;
  }
};
export { Wheel as default };