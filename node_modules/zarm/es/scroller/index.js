import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import { PureComponent } from 'react';
import Events from '../utils/events';
import Throttle from '../utils/throttle';
import { canUseDOM, getScrollContainer, getScrollTop } from '../utils/dom';

var Scroller =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Scroller, _PureComponent);

  function Scroller() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Scroller);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Scroller)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.mounted = void 0;

    _this.onScroll = function () {
      var onScroll = _this.props.onScroll;
      if (!_this.mounted) return;
      typeof onScroll === 'function' && Throttle(onScroll(_this.scrollTop), 250);
    };

    _this.bindEvent = function () {
      _this.scrollContainer && Events.on(_this.scrollContainer, 'scroll', _this.onScroll);
    };

    _this.unBindEvent = function () {
      _this.scrollContainer && Events.off(_this.scrollContainer, 'scroll', _this.onScroll);
    };

    return _this;
  }

  _createClass(Scroller, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.bindEvent();
      this.mounted = true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var container = this.props.container;

      if (prevProps.container !== container) {
        this.bindEvent();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unBindEvent();
      this.mounted = false;
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return children || null;
    }
  }, {
    key: "scrollContainer",
    get: function get() {
      var container = this.props.container;
      return getScrollContainer(container);
    }
  }, {
    key: "scrollTop",
    get: function get() {
      return getScrollTop(this.scrollContainer);
    }
  }]);

  return Scroller;
}(PureComponent);

Scroller.displayName = 'Scroller';
Scroller.defaultProps = {
  prefixCls: 'za-scroller',
  container: canUseDOM ? window : undefined
};
export { Scroller as default };