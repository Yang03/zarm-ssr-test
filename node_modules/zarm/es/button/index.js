import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { PureComponent } from 'react';
import classnames from 'classnames';
import ActivityIndicator from '../activity-indicator';

var Button =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Button, _PureComponent);

  function Button() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.onClick = function (e) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onClick = _this$props.onClick;

      if (disabled) {
        return;
      }

      if (typeof onClick === 'function') {
        onClick(e);
      }
    };

    return _this;
  }

  _createClass(Button, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          className = _this$props2.className,
          theme = _this$props2.theme,
          size = _this$props2.size,
          shape = _this$props2.shape,
          icon = _this$props2.icon,
          block = _this$props2.block,
          ghost = _this$props2.ghost,
          shadow = _this$props2.shadow,
          disabled = _this$props2.disabled,
          loading = _this$props2.loading,
          onClick = _this$props2.onClick,
          children = _this$props2.children,
          rest = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "theme", "size", "shape", "icon", "block", "ghost", "shadow", "disabled", "loading", "onClick", "children"]);

      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), _defineProperty(_classnames, "".concat(prefixCls, "--block"), !!block), _defineProperty(_classnames, "".concat(prefixCls, "--ghost"), !!ghost), _defineProperty(_classnames, "".concat(prefixCls, "--shadow"), !!shadow), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), !!disabled), _classnames));
      var iconRender = loading ? React.createElement(ActivityIndicator, null) : icon;
      var childrenRender = children && React.createElement("span", null, children);
      var contentRender = !!icon || loading ? React.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, iconRender, childrenRender) : childrenRender;

      if (rest.href !== undefined) {
        var _htmlType = rest.htmlType,
            _filteredRest = _objectWithoutProperties(rest, ["htmlType"]);

        var _ref = _filteredRest,
            _mimeType = _ref.mimeType,
            anchorRest = _objectWithoutProperties(_ref, ["mimeType"]);

        cls = classnames(cls, "".concat(prefixCls, "--link"));
        return React.createElement("a", _extends({}, anchorRest, {
          type: _mimeType,
          "aria-disabled": disabled,
          className: cls,
          onClick: this.onClick
        }), contentRender);
      }

      var mimeType = rest.mimeType,
          target = rest.target,
          filteredRest = _objectWithoutProperties(rest, ["mimeType", "target"]);

      var _ref2 = filteredRest,
          htmlType = _ref2.htmlType,
          nativeRest = _objectWithoutProperties(_ref2, ["htmlType"]);

      return React.createElement("button", _extends({}, nativeRest, {
        type: htmlType,
        "aria-disabled": disabled,
        className: cls,
        onClick: this.onClick
      }), contentRender);
    }
  }]);

  return Button;
}(PureComponent);

Button.displayName = 'Button';
Button.defaultProps = {
  prefixCls: 'za-button',
  theme: 'default',
  size: 'md',
  shape: 'radius',
  block: false,
  ghost: false,
  shadow: false,
  disabled: false,
  loading: false,
  htmlType: 'button'
};
export { Button as default };