import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { PureComponent } from 'react';
import classnames from 'classnames/dedupe';
import createFromIconfont from './IconFont';
var INNER_SVG_PROPS = {
  width: '1em',
  height: '1em',
  fill: 'currentColor',
  viewBox: '0 0 32 32'
};

var Icon =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Icon, _PureComponent);

  function Icon() {
    _classCallCheck(this, Icon);

    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));
  }

  _createClass(Icon, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          className = _this$props.className,
          type = _this$props.type,
          style = _this$props.style,
          prefixCls = _this$props.prefixCls,
          theme = _this$props.theme,
          size = _this$props.size,
          children = _this$props.children,
          SvgComponent = _this$props.component,
          viewBox = _this$props.viewBox,
          rest = _objectWithoutProperties(_this$props, ["className", "type", "style", "prefixCls", "theme", "size", "children", "component", "viewBox"]);

      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(type), !!type), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _classnames));

      var newProps = _objectSpread({
        className: cls,
        style: style,
        type: type,
        theme: theme,
        size: size
      }, rest);

      var iconNode; // svg component > children by iconfont > type

      if (SvgComponent) {
        INNER_SVG_PROPS.viewBox = viewBox;
        iconNode = React.createElement("i", newProps, React.createElement(SvgComponent, INNER_SVG_PROPS, children));
      } else if (children) {
        iconNode = React.createElement("i", newProps, React.createElement("svg", INNER_SVG_PROPS, children));
      } else if (type) {
        var MyIcon = Icon.createFromIconfont('//at.alicdn.com/t/font_1285036_9ze0vm44z57.js'); // generated by iconfont.cn

        iconNode = React.createElement(MyIcon, newProps);
      }

      return iconNode;
    }
  }]);

  return Icon;
}(PureComponent);

Icon.displayName = 'Icon';
Icon.defaultProps = {
  prefixCls: 'za-icon',
  theme: 'default',
  size: 'md',
  viewBox: INNER_SVG_PROPS.viewBox
};
Icon.createFromIconfont = createFromIconfont;
export default Icon;