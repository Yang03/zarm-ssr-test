import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from 'react';
import Events from '../utils/events';

var ClickOutside =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ClickOutside, _React$Component);

  function ClickOutside() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ClickOutside);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ClickOutside)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.isTouch = false;
    _this.container = void 0;

    _this.mountContainer = function (node) {
      _this.container = node;
    };

    _this.handle = function (event) {
      if (event.type === 'touchend') {
        _this.isTouch = true;
      }

      if (event.type === 'click' && _this.isTouch) return;
      var _this$props = _this.props,
          onClickOutside = _this$props.onClickOutside,
          ignoredNode = _this$props.ignoredNode;
      var el = _this.container;
      if (ignoredNode && ignoredNode.contains(event.target)) return;
      if (el && !el.contains(event.target)) onClickOutside(event);
    };

    return _this;
  }

  _createClass(ClickOutside, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var disabled = this.props.disabled;

      if (!disabled) {
        this.bindEvent();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var disabled = this.props.disabled;

      if (prevProps.disabled !== disabled) {
        if (disabled) {
          this.unBindEvent();
        } else {
          this.bindEvent();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var disabled = this.props.disabled;

      if (!disabled) {
        this.unBindEvent();
      }
    }
  }, {
    key: "bindEvent",
    value: function bindEvent() {
      Events.on(document, 'click', this.handle);
      Events.on(document, 'touchend', this.handle);
    }
  }, {
    key: "unBindEvent",
    value: function unBindEvent() {
      Events.off(document, 'click', this.handle);
      Events.off(document, 'touchend', this.handle);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          onClickOutside = _this$props2.onClickOutside,
          disabled = _this$props2.disabled,
          children = _this$props2.children,
          ignoredNode = _this$props2.ignoredNode,
          rest = _objectWithoutProperties(_this$props2, ["onClickOutside", "disabled", "children", "ignoredNode"]);

      return React.createElement("div", _extends({
        ref: this.mountContainer
      }, rest), children);
    }
  }]);

  return ClickOutside;
}(React.Component);

ClickOutside.defaultProps = {
  disabled: false
};
export { ClickOutside as default };