import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { PureComponent } from 'react';
import classnames from 'classnames';

var Badge =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Badge, _PureComponent);

  function Badge() {
    _classCallCheck(this, Badge);

    return _possibleConstructorReturn(this, _getPrototypeOf(Badge).apply(this, arguments));
  }

  _createClass(Badge, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          theme = _this$props.theme,
          shape = _this$props.shape,
          text = _this$props.text,
          children = _this$props.children,
          others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "theme", "shape", "text", "children"]);

      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), shape), _defineProperty(_classnames, "".concat(prefixCls, "--sup"), !!children), _classnames));
      return React.createElement("span", {
        className: cls
      }, children, React.createElement("sup", _extends({
        className: "".concat(prefixCls, "__content")
      }, others), shape !== 'dot' && text));
    }
  }]);

  return Badge;
}(PureComponent);

Badge.defaultProps = {
  prefixCls: 'za-badge',
  shape: 'dot',
  theme: 'danger'
};
export { Badge as default };