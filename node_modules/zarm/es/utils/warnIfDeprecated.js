import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { Component } from 'react';
import hoistNonReactStatic from 'hoist-non-react-statics';

function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}

export default function warnIfDeprecated(deprecations) {
  return function Wrapper(WrappedComponent) {
    var WarnIfDeprecatedComp =
    /*#__PURE__*/
    function (_Component) {
      _inherits(WarnIfDeprecatedComp, _Component);

      function WarnIfDeprecatedComp(props) {
        var _this;

        _classCallCheck(this, WarnIfDeprecatedComp);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(WarnIfDeprecatedComp).call(this, props));

        if (process.env.NODE_ENV !== 'production' && deprecations.length) {
          var count = 0;
          deprecations.forEach(function (item) {
            // eslint-disable-next-line react/destructuring-assignment
            if (_this.props[item.oldProp]) {
              console.warn("Warning: ".concat(item.oldProp, " has been renamed, and is not recommended for use.\n\n* Rename ").concat(item.oldProp, " to ").concat(item.newProp, " to suppress this warning."));
              count += 1;
            }
          });

          if (count) {
            console.warn("Please update the following components: ".concat(getDisplayName(WrappedComponent)));
          }
        }

        return _this;
      }

      _createClass(WarnIfDeprecatedComp, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
              forwardedRef = _this$props.forwardedRef,
              other = _objectWithoutProperties(_this$props, ["forwardedRef"]);

          var rest = other;
          return React.createElement(WrappedComponent, _extends({
            ref: forwardedRef
          }, rest));
        }
      }]);

      return WarnIfDeprecatedComp;
    }(Component);

    var forwardRefComp = function forwardRefComp(props, ref) {
      return React.createElement(WarnIfDeprecatedComp, _extends({}, props, {
        forwardedRef: ref
      }));
    };

    forwardRefComp.displayName = 'ForwardedRefComp';
    hoistNonReactStatic(forwardRefComp, WrappedComponent);
    var forwardCps = React.forwardRef(forwardRefComp);
    return forwardCps;
  };
}