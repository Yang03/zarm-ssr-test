import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { PureComponent } from 'react';
import classnames from 'classnames';

var CollapseItem =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(CollapseItem, _PureComponent);

  function CollapseItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, CollapseItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CollapseItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.content = void 0;
    _this.state = {
      active: _this.props.isActive
    };

    _this.onClickItem = function () {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          disabled = _this$props.disabled;
      var active = _this.state.active;
      if (disabled) return;
      typeof onChange === 'function' && onChange(active);
    };

    _this.setStyle = function () {
      if (!_this.content) return;
      var active = _this.state.active;
      _this.content.style.height = active ? "".concat(_this.getContentHeight(_this.content), "px") : '0px';
    };

    _this.getContentHeight = function (content) {
      var children = _toConsumableArray(content.children);

      return children.reduce(function (res, next) {
        res += next.offsetHeight;
        return res;
      }, 0);
    };

    return _this;
  }

  _createClass(CollapseItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setStyle();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.setStyle();
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames,
          _this2 = this;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          title = _this$props2.title,
          className = _this$props2.className,
          disabled = _this$props2.disabled,
          animated = _this$props2.animated,
          isActive = _this$props2.isActive,
          children = _this$props2.children,
          onChange = _this$props2.onChange,
          rest = _objectWithoutProperties(_this$props2, ["prefixCls", "title", "className", "disabled", "animated", "isActive", "children", "onChange"]);

      var active = this.state.active;
      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--active"), active), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _classnames));
      return React.createElement("div", _extends({
        className: cls
      }, rest), React.createElement("div", {
        className: "".concat(prefixCls, "__title"),
        onClick: this.onClickItem
      }, React.createElement("div", null, title), React.createElement("div", {
        className: "".concat(prefixCls, "__arrow")
      })), React.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        ref: function ref(content) {
          _this2.content = content;
        }
      }, React.createElement("div", {
        className: "".concat(prefixCls, "__content__inner")
      }, children)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ('isActive' in nextProps && nextProps.isActive !== state.prevActive) {
        return {
          active: nextProps.isActive,
          prevActive: nextProps.isActive
        };
      }

      return null;
    }
  }]);

  return CollapseItem;
}(PureComponent);

CollapseItem.defaultProps = {
  prefixCls: 'za-collapse-item',
  animated: false,
  disabled: false
};
export { CollapseItem as default };