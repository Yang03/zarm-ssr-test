import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { PureComponent } from 'react';
import classnames from 'classnames';
import Cell from '../cell';

var getChecked = function getChecked(props, defaultChecked) {
  if (typeof props.checked !== 'undefined') {
    return props.checked;
  }

  if (typeof props.defaultChecked !== 'undefined') {
    return props.defaultChecked;
  }

  return defaultChecked;
};

var Checkbox =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Checkbox, _PureComponent);

  function Checkbox() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Checkbox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      checked: getChecked(_this.props, false)
    };

    _this.onValueChange = function (e) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onChange = _this$props.onChange;
      var checked = _this.state.checked;

      if (disabled) {
        return;
      }

      var newChecked = !checked;

      if (!('checked' in _this.props)) {
        _this.setState({
          checked: newChecked
        });
      }

      typeof onChange === 'function' && onChange(e);
    };

    return _this;
  }

  _createClass(Checkbox, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          className = _this$props2.className,
          type = _this$props2.type,
          shape = _this$props2.shape,
          value = _this$props2.value,
          checked = _this$props2.checked,
          defaultChecked = _this$props2.defaultChecked,
          disabled = _this$props2.disabled,
          id = _this$props2.id,
          indeterminate = _this$props2.indeterminate,
          children = _this$props2.children,
          onChange = _this$props2.onChange,
          rest = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "type", "shape", "value", "checked", "defaultChecked", "disabled", "id", "indeterminate", "children", "onChange"]);

      var checkedState = this.state.checked;
      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--checked"), checkedState), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--indeterminate"), indeterminate), _defineProperty(_classnames, "".concat(prefixCls, "--untext"), !children), _classnames));
      var inputRender = React.createElement("input", {
        id: id,
        type: "checkbox",
        className: "".concat(prefixCls, "__input"),
        value: value,
        disabled: disabled,
        checked: checkedState,
        onChange: this.onValueChange
      });
      var checkboxRender = React.createElement("span", _extends({
        className: cls
      }, rest), React.createElement("span", {
        className: "".concat(prefixCls, "__widget")
      }, React.createElement("span", {
        className: "".concat(prefixCls, "__inner")
      })), children && React.createElement("span", {
        className: "".concat(prefixCls, "__text")
      }, children), inputRender);

      if (type === 'cell') {
        return React.createElement(Cell, _extends({
          disabled: disabled,
          className: className,
          onClick: function onClick() {}
        }, rest), checkboxRender);
      }

      if (type === 'button') {
        return React.createElement("button", _extends({
          type: "button",
          disabled: disabled,
          className: cls
        }, rest), children, inputRender);
      }

      return checkboxRender;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ('checked' in nextProps && nextProps.checked !== state.prevChecked) {
        return {
          checked: nextProps.checked,
          prevChecked: nextProps.checked
        };
      }

      return null;
    }
  }]);

  return Checkbox;
}(PureComponent);

Checkbox.Group = void 0;
Checkbox.displayName = 'Checkbox';
Checkbox.defaultProps = {
  prefixCls: 'za-checkbox',
  disabled: false,
  indeterminate: false
};
export { Checkbox as default };