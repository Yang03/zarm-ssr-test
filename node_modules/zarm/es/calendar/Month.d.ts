import { Component } from 'react';
import { BaseCalendarMonthProps } from './PropsType';
export interface CalendarMonthProps extends BaseCalendarMonthProps {
    prefixCls?: string;
}
export interface CalendarMonthState {
    value: Date[];
    dateMonth: Date;
}
export default class CalendarMonthView extends Component<CalendarMonthProps, CalendarMonthState> {
    static displayName: string;
    static defaultProps: {
        prefixCls: string;
        value: never[];
        dateMonth: Date;
        min: Date;
        max: Date;
        dateRender: (date: Date) => number;
        disabledDate: () => boolean;
    };
    static now: Date;
    static cache: {
        now: string;
    };
    private min;
    private max;
    private lastIn?;
    private isRefresh;
    private node?;
    constructor(props: CalendarMonthProps);
    static getDerivedStateFromProps(nextProps: any, state: any): {
        value: any;
        dateMonth: any;
    } | null;
    shouldComponentUpdate(nextProps: any): boolean;
    anchor: () => void;
    checkRefresh: (props: CalendarMonthProps) => boolean;
    checkStatus: (date: Date) => {
        disabled: boolean | undefined;
        isSelected: boolean;
        isRange: boolean;
        rangeStart: boolean;
        rangeEnd: boolean;
    };
    renderDay: (day: number, year: number, month: number, firstDay: number) => JSX.Element;
    renderContent: (year: number, month: number) => JSX.Element[];
    render(): JSX.Element;
}
